
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Agendamento` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Agendamento
 * 
 */
export type AgendamentoModel = runtime.Types.Result.DefaultSelection<Prisma.$AgendamentoPayload>

export type AggregateAgendamento = {
  _count: AgendamentoCountAggregateOutputType | null
  _avg: AgendamentoAvgAggregateOutputType | null
  _sum: AgendamentoSumAggregateOutputType | null
  _min: AgendamentoMinAggregateOutputType | null
  _max: AgendamentoMaxAggregateOutputType | null
}

export type AgendamentoAvgAggregateOutputType = {
  id_agendamento: number | null
  id_cliente: number | null
  id_servico: number | null
}

export type AgendamentoSumAggregateOutputType = {
  id_agendamento: number | null
  id_cliente: number | null
  id_servico: number | null
}

export type AgendamentoMinAggregateOutputType = {
  id_agendamento: number | null
  mensagem: string | null
  dt_agendamento: Date | null
  status: string | null
  id_cliente: number | null
  id_servico: number | null
}

export type AgendamentoMaxAggregateOutputType = {
  id_agendamento: number | null
  mensagem: string | null
  dt_agendamento: Date | null
  status: string | null
  id_cliente: number | null
  id_servico: number | null
}

export type AgendamentoCountAggregateOutputType = {
  id_agendamento: number
  mensagem: number
  dt_agendamento: number
  status: number
  id_cliente: number
  id_servico: number
  _all: number
}


export type AgendamentoAvgAggregateInputType = {
  id_agendamento?: true
  id_cliente?: true
  id_servico?: true
}

export type AgendamentoSumAggregateInputType = {
  id_agendamento?: true
  id_cliente?: true
  id_servico?: true
}

export type AgendamentoMinAggregateInputType = {
  id_agendamento?: true
  mensagem?: true
  dt_agendamento?: true
  status?: true
  id_cliente?: true
  id_servico?: true
}

export type AgendamentoMaxAggregateInputType = {
  id_agendamento?: true
  mensagem?: true
  dt_agendamento?: true
  status?: true
  id_cliente?: true
  id_servico?: true
}

export type AgendamentoCountAggregateInputType = {
  id_agendamento?: true
  mensagem?: true
  dt_agendamento?: true
  status?: true
  id_cliente?: true
  id_servico?: true
  _all?: true
}

export type AgendamentoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Agendamento to aggregate.
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Agendamentos to fetch.
   */
  orderBy?: Prisma.AgendamentoOrderByWithRelationInput | Prisma.AgendamentoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AgendamentoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Agendamentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Agendamentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Agendamentos
  **/
  _count?: true | AgendamentoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AgendamentoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AgendamentoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AgendamentoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AgendamentoMaxAggregateInputType
}

export type GetAgendamentoAggregateType<T extends AgendamentoAggregateArgs> = {
      [P in keyof T & keyof AggregateAgendamento]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAgendamento[P]>
    : Prisma.GetScalarType<T[P], AggregateAgendamento[P]>
}




export type AgendamentoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AgendamentoWhereInput
  orderBy?: Prisma.AgendamentoOrderByWithAggregationInput | Prisma.AgendamentoOrderByWithAggregationInput[]
  by: Prisma.AgendamentoScalarFieldEnum[] | Prisma.AgendamentoScalarFieldEnum
  having?: Prisma.AgendamentoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AgendamentoCountAggregateInputType | true
  _avg?: AgendamentoAvgAggregateInputType
  _sum?: AgendamentoSumAggregateInputType
  _min?: AgendamentoMinAggregateInputType
  _max?: AgendamentoMaxAggregateInputType
}

export type AgendamentoGroupByOutputType = {
  id_agendamento: number
  mensagem: string
  dt_agendamento: Date
  status: string
  id_cliente: number
  id_servico: number
  _count: AgendamentoCountAggregateOutputType | null
  _avg: AgendamentoAvgAggregateOutputType | null
  _sum: AgendamentoSumAggregateOutputType | null
  _min: AgendamentoMinAggregateOutputType | null
  _max: AgendamentoMaxAggregateOutputType | null
}

type GetAgendamentoGroupByPayload<T extends AgendamentoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AgendamentoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AgendamentoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
      }
    >
  >



export type AgendamentoWhereInput = {
  AND?: Prisma.AgendamentoWhereInput | Prisma.AgendamentoWhereInput[]
  OR?: Prisma.AgendamentoWhereInput[]
  NOT?: Prisma.AgendamentoWhereInput | Prisma.AgendamentoWhereInput[]
  id_agendamento?: Prisma.IntFilter<"Agendamento"> | number
  mensagem?: Prisma.StringFilter<"Agendamento"> | string
  dt_agendamento?: Prisma.DateTimeFilter<"Agendamento"> | Date | string
  status?: Prisma.StringFilter<"Agendamento"> | string
  id_cliente?: Prisma.IntFilter<"Agendamento"> | number
  id_servico?: Prisma.IntFilter<"Agendamento"> | number
  cliente?: Prisma.XOR<Prisma.ClienteScalarRelationFilter, Prisma.ClienteWhereInput>
  servico?: Prisma.XOR<Prisma.ServicoScalarRelationFilter, Prisma.ServicoWhereInput>
}

export type AgendamentoOrderByWithRelationInput = {
  id_agendamento?: Prisma.SortOrder
  mensagem?: Prisma.SortOrder
  dt_agendamento?: Prisma.SortOrder
  status?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
  cliente?: Prisma.ClienteOrderByWithRelationInput
  servico?: Prisma.ServicoOrderByWithRelationInput
}

export type AgendamentoWhereUniqueInput = Prisma.AtLeast<{
  id_agendamento?: number
  AND?: Prisma.AgendamentoWhereInput | Prisma.AgendamentoWhereInput[]
  OR?: Prisma.AgendamentoWhereInput[]
  NOT?: Prisma.AgendamentoWhereInput | Prisma.AgendamentoWhereInput[]
  mensagem?: Prisma.StringFilter<"Agendamento"> | string
  dt_agendamento?: Prisma.DateTimeFilter<"Agendamento"> | Date | string
  status?: Prisma.StringFilter<"Agendamento"> | string
  id_cliente?: Prisma.IntFilter<"Agendamento"> | number
  id_servico?: Prisma.IntFilter<"Agendamento"> | number
  cliente?: Prisma.XOR<Prisma.ClienteScalarRelationFilter, Prisma.ClienteWhereInput>
  servico?: Prisma.XOR<Prisma.ServicoScalarRelationFilter, Prisma.ServicoWhereInput>
}, "id_agendamento">

export type AgendamentoOrderByWithAggregationInput = {
  id_agendamento?: Prisma.SortOrder
  mensagem?: Prisma.SortOrder
  dt_agendamento?: Prisma.SortOrder
  status?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
  _count?: Prisma.AgendamentoCountOrderByAggregateInput
  _avg?: Prisma.AgendamentoAvgOrderByAggregateInput
  _max?: Prisma.AgendamentoMaxOrderByAggregateInput
  _min?: Prisma.AgendamentoMinOrderByAggregateInput
  _sum?: Prisma.AgendamentoSumOrderByAggregateInput
}

export type AgendamentoScalarWhereWithAggregatesInput = {
  AND?: Prisma.AgendamentoScalarWhereWithAggregatesInput | Prisma.AgendamentoScalarWhereWithAggregatesInput[]
  OR?: Prisma.AgendamentoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AgendamentoScalarWhereWithAggregatesInput | Prisma.AgendamentoScalarWhereWithAggregatesInput[]
  id_agendamento?: Prisma.IntWithAggregatesFilter<"Agendamento"> | number
  mensagem?: Prisma.StringWithAggregatesFilter<"Agendamento"> | string
  dt_agendamento?: Prisma.DateTimeWithAggregatesFilter<"Agendamento"> | Date | string
  status?: Prisma.StringWithAggregatesFilter<"Agendamento"> | string
  id_cliente?: Prisma.IntWithAggregatesFilter<"Agendamento"> | number
  id_servico?: Prisma.IntWithAggregatesFilter<"Agendamento"> | number
}

export type AgendamentoCreateInput = {
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  cliente: Prisma.ClienteCreateNestedOneWithoutAgendamentosInput
  servico: Prisma.ServicoCreateNestedOneWithoutAgendamentosInput
}

export type AgendamentoUncheckedCreateInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_cliente: number
  id_servico: number
}

export type AgendamentoUpdateInput = {
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  cliente?: Prisma.ClienteUpdateOneRequiredWithoutAgendamentosNestedInput
  servico?: Prisma.ServicoUpdateOneRequiredWithoutAgendamentosNestedInput
}

export type AgendamentoUncheckedUpdateInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_cliente?: Prisma.IntFieldUpdateOperationsInput | number
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AgendamentoCreateManyInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_cliente: number
  id_servico: number
}

export type AgendamentoUpdateManyMutationInput = {
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AgendamentoUncheckedUpdateManyInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_cliente?: Prisma.IntFieldUpdateOperationsInput | number
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AgendamentoListRelationFilter = {
  every?: Prisma.AgendamentoWhereInput
  some?: Prisma.AgendamentoWhereInput
  none?: Prisma.AgendamentoWhereInput
}

export type AgendamentoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AgendamentoCountOrderByAggregateInput = {
  id_agendamento?: Prisma.SortOrder
  mensagem?: Prisma.SortOrder
  dt_agendamento?: Prisma.SortOrder
  status?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
}

export type AgendamentoAvgOrderByAggregateInput = {
  id_agendamento?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
}

export type AgendamentoMaxOrderByAggregateInput = {
  id_agendamento?: Prisma.SortOrder
  mensagem?: Prisma.SortOrder
  dt_agendamento?: Prisma.SortOrder
  status?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
}

export type AgendamentoMinOrderByAggregateInput = {
  id_agendamento?: Prisma.SortOrder
  mensagem?: Prisma.SortOrder
  dt_agendamento?: Prisma.SortOrder
  status?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
}

export type AgendamentoSumOrderByAggregateInput = {
  id_agendamento?: Prisma.SortOrder
  id_cliente?: Prisma.SortOrder
  id_servico?: Prisma.SortOrder
}

export type AgendamentoCreateNestedManyWithoutClienteInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput> | Prisma.AgendamentoCreateWithoutClienteInput[] | Prisma.AgendamentoUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutClienteInput | Prisma.AgendamentoCreateOrConnectWithoutClienteInput[]
  createMany?: Prisma.AgendamentoCreateManyClienteInputEnvelope
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
}

export type AgendamentoUncheckedCreateNestedManyWithoutClienteInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput> | Prisma.AgendamentoCreateWithoutClienteInput[] | Prisma.AgendamentoUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutClienteInput | Prisma.AgendamentoCreateOrConnectWithoutClienteInput[]
  createMany?: Prisma.AgendamentoCreateManyClienteInputEnvelope
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
}

export type AgendamentoUpdateManyWithoutClienteNestedInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput> | Prisma.AgendamentoCreateWithoutClienteInput[] | Prisma.AgendamentoUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutClienteInput | Prisma.AgendamentoCreateOrConnectWithoutClienteInput[]
  upsert?: Prisma.AgendamentoUpsertWithWhereUniqueWithoutClienteInput | Prisma.AgendamentoUpsertWithWhereUniqueWithoutClienteInput[]
  createMany?: Prisma.AgendamentoCreateManyClienteInputEnvelope
  set?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  disconnect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  delete?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  update?: Prisma.AgendamentoUpdateWithWhereUniqueWithoutClienteInput | Prisma.AgendamentoUpdateWithWhereUniqueWithoutClienteInput[]
  updateMany?: Prisma.AgendamentoUpdateManyWithWhereWithoutClienteInput | Prisma.AgendamentoUpdateManyWithWhereWithoutClienteInput[]
  deleteMany?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
}

export type AgendamentoUncheckedUpdateManyWithoutClienteNestedInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput> | Prisma.AgendamentoCreateWithoutClienteInput[] | Prisma.AgendamentoUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutClienteInput | Prisma.AgendamentoCreateOrConnectWithoutClienteInput[]
  upsert?: Prisma.AgendamentoUpsertWithWhereUniqueWithoutClienteInput | Prisma.AgendamentoUpsertWithWhereUniqueWithoutClienteInput[]
  createMany?: Prisma.AgendamentoCreateManyClienteInputEnvelope
  set?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  disconnect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  delete?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  update?: Prisma.AgendamentoUpdateWithWhereUniqueWithoutClienteInput | Prisma.AgendamentoUpdateWithWhereUniqueWithoutClienteInput[]
  updateMany?: Prisma.AgendamentoUpdateManyWithWhereWithoutClienteInput | Prisma.AgendamentoUpdateManyWithWhereWithoutClienteInput[]
  deleteMany?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
}

export type AgendamentoCreateNestedManyWithoutServicoInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput> | Prisma.AgendamentoCreateWithoutServicoInput[] | Prisma.AgendamentoUncheckedCreateWithoutServicoInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutServicoInput | Prisma.AgendamentoCreateOrConnectWithoutServicoInput[]
  createMany?: Prisma.AgendamentoCreateManyServicoInputEnvelope
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
}

export type AgendamentoUncheckedCreateNestedManyWithoutServicoInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput> | Prisma.AgendamentoCreateWithoutServicoInput[] | Prisma.AgendamentoUncheckedCreateWithoutServicoInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutServicoInput | Prisma.AgendamentoCreateOrConnectWithoutServicoInput[]
  createMany?: Prisma.AgendamentoCreateManyServicoInputEnvelope
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
}

export type AgendamentoUpdateManyWithoutServicoNestedInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput> | Prisma.AgendamentoCreateWithoutServicoInput[] | Prisma.AgendamentoUncheckedCreateWithoutServicoInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutServicoInput | Prisma.AgendamentoCreateOrConnectWithoutServicoInput[]
  upsert?: Prisma.AgendamentoUpsertWithWhereUniqueWithoutServicoInput | Prisma.AgendamentoUpsertWithWhereUniqueWithoutServicoInput[]
  createMany?: Prisma.AgendamentoCreateManyServicoInputEnvelope
  set?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  disconnect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  delete?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  update?: Prisma.AgendamentoUpdateWithWhereUniqueWithoutServicoInput | Prisma.AgendamentoUpdateWithWhereUniqueWithoutServicoInput[]
  updateMany?: Prisma.AgendamentoUpdateManyWithWhereWithoutServicoInput | Prisma.AgendamentoUpdateManyWithWhereWithoutServicoInput[]
  deleteMany?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
}

export type AgendamentoUncheckedUpdateManyWithoutServicoNestedInput = {
  create?: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput> | Prisma.AgendamentoCreateWithoutServicoInput[] | Prisma.AgendamentoUncheckedCreateWithoutServicoInput[]
  connectOrCreate?: Prisma.AgendamentoCreateOrConnectWithoutServicoInput | Prisma.AgendamentoCreateOrConnectWithoutServicoInput[]
  upsert?: Prisma.AgendamentoUpsertWithWhereUniqueWithoutServicoInput | Prisma.AgendamentoUpsertWithWhereUniqueWithoutServicoInput[]
  createMany?: Prisma.AgendamentoCreateManyServicoInputEnvelope
  set?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  disconnect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  delete?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  connect?: Prisma.AgendamentoWhereUniqueInput | Prisma.AgendamentoWhereUniqueInput[]
  update?: Prisma.AgendamentoUpdateWithWhereUniqueWithoutServicoInput | Prisma.AgendamentoUpdateWithWhereUniqueWithoutServicoInput[]
  updateMany?: Prisma.AgendamentoUpdateManyWithWhereWithoutServicoInput | Prisma.AgendamentoUpdateManyWithWhereWithoutServicoInput[]
  deleteMany?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type AgendamentoCreateWithoutClienteInput = {
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  servico: Prisma.ServicoCreateNestedOneWithoutAgendamentosInput
}

export type AgendamentoUncheckedCreateWithoutClienteInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_servico: number
}

export type AgendamentoCreateOrConnectWithoutClienteInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  create: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput>
}

export type AgendamentoCreateManyClienteInputEnvelope = {
  data: Prisma.AgendamentoCreateManyClienteInput | Prisma.AgendamentoCreateManyClienteInput[]
  skipDuplicates?: boolean
}

export type AgendamentoUpsertWithWhereUniqueWithoutClienteInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  update: Prisma.XOR<Prisma.AgendamentoUpdateWithoutClienteInput, Prisma.AgendamentoUncheckedUpdateWithoutClienteInput>
  create: Prisma.XOR<Prisma.AgendamentoCreateWithoutClienteInput, Prisma.AgendamentoUncheckedCreateWithoutClienteInput>
}

export type AgendamentoUpdateWithWhereUniqueWithoutClienteInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  data: Prisma.XOR<Prisma.AgendamentoUpdateWithoutClienteInput, Prisma.AgendamentoUncheckedUpdateWithoutClienteInput>
}

export type AgendamentoUpdateManyWithWhereWithoutClienteInput = {
  where: Prisma.AgendamentoScalarWhereInput
  data: Prisma.XOR<Prisma.AgendamentoUpdateManyMutationInput, Prisma.AgendamentoUncheckedUpdateManyWithoutClienteInput>
}

export type AgendamentoScalarWhereInput = {
  AND?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
  OR?: Prisma.AgendamentoScalarWhereInput[]
  NOT?: Prisma.AgendamentoScalarWhereInput | Prisma.AgendamentoScalarWhereInput[]
  id_agendamento?: Prisma.IntFilter<"Agendamento"> | number
  mensagem?: Prisma.StringFilter<"Agendamento"> | string
  dt_agendamento?: Prisma.DateTimeFilter<"Agendamento"> | Date | string
  status?: Prisma.StringFilter<"Agendamento"> | string
  id_cliente?: Prisma.IntFilter<"Agendamento"> | number
  id_servico?: Prisma.IntFilter<"Agendamento"> | number
}

export type AgendamentoCreateWithoutServicoInput = {
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  cliente: Prisma.ClienteCreateNestedOneWithoutAgendamentosInput
}

export type AgendamentoUncheckedCreateWithoutServicoInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_cliente: number
}

export type AgendamentoCreateOrConnectWithoutServicoInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  create: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput>
}

export type AgendamentoCreateManyServicoInputEnvelope = {
  data: Prisma.AgendamentoCreateManyServicoInput | Prisma.AgendamentoCreateManyServicoInput[]
  skipDuplicates?: boolean
}

export type AgendamentoUpsertWithWhereUniqueWithoutServicoInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  update: Prisma.XOR<Prisma.AgendamentoUpdateWithoutServicoInput, Prisma.AgendamentoUncheckedUpdateWithoutServicoInput>
  create: Prisma.XOR<Prisma.AgendamentoCreateWithoutServicoInput, Prisma.AgendamentoUncheckedCreateWithoutServicoInput>
}

export type AgendamentoUpdateWithWhereUniqueWithoutServicoInput = {
  where: Prisma.AgendamentoWhereUniqueInput
  data: Prisma.XOR<Prisma.AgendamentoUpdateWithoutServicoInput, Prisma.AgendamentoUncheckedUpdateWithoutServicoInput>
}

export type AgendamentoUpdateManyWithWhereWithoutServicoInput = {
  where: Prisma.AgendamentoScalarWhereInput
  data: Prisma.XOR<Prisma.AgendamentoUpdateManyMutationInput, Prisma.AgendamentoUncheckedUpdateManyWithoutServicoInput>
}

export type AgendamentoCreateManyClienteInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_servico: number
}

export type AgendamentoUpdateWithoutClienteInput = {
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  servico?: Prisma.ServicoUpdateOneRequiredWithoutAgendamentosNestedInput
}

export type AgendamentoUncheckedUpdateWithoutClienteInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AgendamentoUncheckedUpdateManyWithoutClienteInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AgendamentoCreateManyServicoInput = {
  id_agendamento?: number
  mensagem: string
  dt_agendamento?: Date | string
  status?: string
  id_cliente: number
}

export type AgendamentoUpdateWithoutServicoInput = {
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  cliente?: Prisma.ClienteUpdateOneRequiredWithoutAgendamentosNestedInput
}

export type AgendamentoUncheckedUpdateWithoutServicoInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_cliente?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AgendamentoUncheckedUpdateManyWithoutServicoInput = {
  id_agendamento?: Prisma.IntFieldUpdateOperationsInput | number
  mensagem?: Prisma.StringFieldUpdateOperationsInput | string
  dt_agendamento?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  id_cliente?: Prisma.IntFieldUpdateOperationsInput | number
}



export type AgendamentoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_agendamento?: boolean
  mensagem?: boolean
  dt_agendamento?: boolean
  status?: boolean
  id_cliente?: boolean
  id_servico?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["agendamento"]>

export type AgendamentoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_agendamento?: boolean
  mensagem?: boolean
  dt_agendamento?: boolean
  status?: boolean
  id_cliente?: boolean
  id_servico?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["agendamento"]>

export type AgendamentoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_agendamento?: boolean
  mensagem?: boolean
  dt_agendamento?: boolean
  status?: boolean
  id_cliente?: boolean
  id_servico?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["agendamento"]>

export type AgendamentoSelectScalar = {
  id_agendamento?: boolean
  mensagem?: boolean
  dt_agendamento?: boolean
  status?: boolean
  id_cliente?: boolean
  id_servico?: boolean
}

export type AgendamentoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id_agendamento" | "mensagem" | "dt_agendamento" | "status" | "id_cliente" | "id_servico", ExtArgs["result"]["agendamento"]>
export type AgendamentoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}
export type AgendamentoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}
export type AgendamentoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  servico?: boolean | Prisma.ServicoDefaultArgs<ExtArgs>
}

export type $AgendamentoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Agendamento"
  objects: {
    cliente: Prisma.$ClientePayload<ExtArgs>
    servico: Prisma.$ServicoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id_agendamento: number
    mensagem: string
    dt_agendamento: Date
    status: string
    id_cliente: number
    id_servico: number
  }, ExtArgs["result"]["agendamento"]>
  composites: {}
}

export type AgendamentoGetPayload<S extends boolean | null | undefined | AgendamentoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload, S>

export type AgendamentoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AgendamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AgendamentoCountAggregateInputType | true
  }

export interface AgendamentoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agendamento'], meta: { name: 'Agendamento' } }
  /**
   * Find zero or one Agendamento that matches the filter.
   * @param {AgendamentoFindUniqueArgs} args - Arguments to find a Agendamento
   * @example
   * // Get one Agendamento
   * const agendamento = await prisma.agendamento.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AgendamentoFindUniqueArgs>(args: Prisma.SelectSubset<T, AgendamentoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Agendamento that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AgendamentoFindUniqueOrThrowArgs} args - Arguments to find a Agendamento
   * @example
   * // Get one Agendamento
   * const agendamento = await prisma.agendamento.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AgendamentoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AgendamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Agendamento that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoFindFirstArgs} args - Arguments to find a Agendamento
   * @example
   * // Get one Agendamento
   * const agendamento = await prisma.agendamento.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AgendamentoFindFirstArgs>(args?: Prisma.SelectSubset<T, AgendamentoFindFirstArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Agendamento that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoFindFirstOrThrowArgs} args - Arguments to find a Agendamento
   * @example
   * // Get one Agendamento
   * const agendamento = await prisma.agendamento.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AgendamentoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AgendamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Agendamentos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Agendamentos
   * const agendamentos = await prisma.agendamento.findMany()
   * 
   * // Get first 10 Agendamentos
   * const agendamentos = await prisma.agendamento.findMany({ take: 10 })
   * 
   * // Only select the `id_agendamento`
   * const agendamentoWithId_agendamentoOnly = await prisma.agendamento.findMany({ select: { id_agendamento: true } })
   * 
   */
  findMany<T extends AgendamentoFindManyArgs>(args?: Prisma.SelectSubset<T, AgendamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Agendamento.
   * @param {AgendamentoCreateArgs} args - Arguments to create a Agendamento.
   * @example
   * // Create one Agendamento
   * const Agendamento = await prisma.agendamento.create({
   *   data: {
   *     // ... data to create a Agendamento
   *   }
   * })
   * 
   */
  create<T extends AgendamentoCreateArgs>(args: Prisma.SelectSubset<T, AgendamentoCreateArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Agendamentos.
   * @param {AgendamentoCreateManyArgs} args - Arguments to create many Agendamentos.
   * @example
   * // Create many Agendamentos
   * const agendamento = await prisma.agendamento.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AgendamentoCreateManyArgs>(args?: Prisma.SelectSubset<T, AgendamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Agendamentos and returns the data saved in the database.
   * @param {AgendamentoCreateManyAndReturnArgs} args - Arguments to create many Agendamentos.
   * @example
   * // Create many Agendamentos
   * const agendamento = await prisma.agendamento.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Agendamentos and only return the `id_agendamento`
   * const agendamentoWithId_agendamentoOnly = await prisma.agendamento.createManyAndReturn({
   *   select: { id_agendamento: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AgendamentoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AgendamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Agendamento.
   * @param {AgendamentoDeleteArgs} args - Arguments to delete one Agendamento.
   * @example
   * // Delete one Agendamento
   * const Agendamento = await prisma.agendamento.delete({
   *   where: {
   *     // ... filter to delete one Agendamento
   *   }
   * })
   * 
   */
  delete<T extends AgendamentoDeleteArgs>(args: Prisma.SelectSubset<T, AgendamentoDeleteArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Agendamento.
   * @param {AgendamentoUpdateArgs} args - Arguments to update one Agendamento.
   * @example
   * // Update one Agendamento
   * const agendamento = await prisma.agendamento.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AgendamentoUpdateArgs>(args: Prisma.SelectSubset<T, AgendamentoUpdateArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Agendamentos.
   * @param {AgendamentoDeleteManyArgs} args - Arguments to filter Agendamentos to delete.
   * @example
   * // Delete a few Agendamentos
   * const { count } = await prisma.agendamento.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AgendamentoDeleteManyArgs>(args?: Prisma.SelectSubset<T, AgendamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Agendamentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Agendamentos
   * const agendamento = await prisma.agendamento.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AgendamentoUpdateManyArgs>(args: Prisma.SelectSubset<T, AgendamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Agendamentos and returns the data updated in the database.
   * @param {AgendamentoUpdateManyAndReturnArgs} args - Arguments to update many Agendamentos.
   * @example
   * // Update many Agendamentos
   * const agendamento = await prisma.agendamento.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Agendamentos and only return the `id_agendamento`
   * const agendamentoWithId_agendamentoOnly = await prisma.agendamento.updateManyAndReturn({
   *   select: { id_agendamento: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AgendamentoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AgendamentoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Agendamento.
   * @param {AgendamentoUpsertArgs} args - Arguments to update or create a Agendamento.
   * @example
   * // Update or create a Agendamento
   * const agendamento = await prisma.agendamento.upsert({
   *   create: {
   *     // ... data to create a Agendamento
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Agendamento we want to update
   *   }
   * })
   */
  upsert<T extends AgendamentoUpsertArgs>(args: Prisma.SelectSubset<T, AgendamentoUpsertArgs<ExtArgs>>): Prisma.Prisma__AgendamentoClient<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Agendamentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoCountArgs} args - Arguments to filter Agendamentos to count.
   * @example
   * // Count the number of Agendamentos
   * const count = await prisma.agendamento.count({
   *   where: {
   *     // ... the filter for the Agendamentos we want to count
   *   }
   * })
  **/
  count<T extends AgendamentoCountArgs>(
    args?: Prisma.Subset<T, AgendamentoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AgendamentoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Agendamento.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AgendamentoAggregateArgs>(args: Prisma.Subset<T, AgendamentoAggregateArgs>): Prisma.PrismaPromise<GetAgendamentoAggregateType<T>>

  /**
   * Group by Agendamento.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AgendamentoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AgendamentoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AgendamentoGroupByArgs['orderBy'] }
      : { orderBy?: AgendamentoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AgendamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Agendamento model
 */
readonly fields: AgendamentoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Agendamento.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AgendamentoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  cliente<T extends Prisma.ClienteDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClienteDefaultArgs<ExtArgs>>): Prisma.Prisma__ClienteClient<runtime.Types.Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  servico<T extends Prisma.ServicoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServicoDefaultArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Agendamento model
 */
export interface AgendamentoFieldRefs {
  readonly id_agendamento: Prisma.FieldRef<"Agendamento", 'Int'>
  readonly mensagem: Prisma.FieldRef<"Agendamento", 'String'>
  readonly dt_agendamento: Prisma.FieldRef<"Agendamento", 'DateTime'>
  readonly status: Prisma.FieldRef<"Agendamento", 'String'>
  readonly id_cliente: Prisma.FieldRef<"Agendamento", 'Int'>
  readonly id_servico: Prisma.FieldRef<"Agendamento", 'Int'>
}
    

// Custom InputTypes
/**
 * Agendamento findUnique
 */
export type AgendamentoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter, which Agendamento to fetch.
   */
  where: Prisma.AgendamentoWhereUniqueInput
}

/**
 * Agendamento findUniqueOrThrow
 */
export type AgendamentoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter, which Agendamento to fetch.
   */
  where: Prisma.AgendamentoWhereUniqueInput
}

/**
 * Agendamento findFirst
 */
export type AgendamentoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter, which Agendamento to fetch.
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Agendamentos to fetch.
   */
  orderBy?: Prisma.AgendamentoOrderByWithRelationInput | Prisma.AgendamentoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Agendamentos.
   */
  cursor?: Prisma.AgendamentoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Agendamentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Agendamentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Agendamentos.
   */
  distinct?: Prisma.AgendamentoScalarFieldEnum | Prisma.AgendamentoScalarFieldEnum[]
}

/**
 * Agendamento findFirstOrThrow
 */
export type AgendamentoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter, which Agendamento to fetch.
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Agendamentos to fetch.
   */
  orderBy?: Prisma.AgendamentoOrderByWithRelationInput | Prisma.AgendamentoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Agendamentos.
   */
  cursor?: Prisma.AgendamentoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Agendamentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Agendamentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Agendamentos.
   */
  distinct?: Prisma.AgendamentoScalarFieldEnum | Prisma.AgendamentoScalarFieldEnum[]
}

/**
 * Agendamento findMany
 */
export type AgendamentoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter, which Agendamentos to fetch.
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Agendamentos to fetch.
   */
  orderBy?: Prisma.AgendamentoOrderByWithRelationInput | Prisma.AgendamentoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Agendamentos.
   */
  cursor?: Prisma.AgendamentoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Agendamentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Agendamentos.
   */
  skip?: number
  distinct?: Prisma.AgendamentoScalarFieldEnum | Prisma.AgendamentoScalarFieldEnum[]
}

/**
 * Agendamento create
 */
export type AgendamentoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * The data needed to create a Agendamento.
   */
  data: Prisma.XOR<Prisma.AgendamentoCreateInput, Prisma.AgendamentoUncheckedCreateInput>
}

/**
 * Agendamento createMany
 */
export type AgendamentoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Agendamentos.
   */
  data: Prisma.AgendamentoCreateManyInput | Prisma.AgendamentoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Agendamento createManyAndReturn
 */
export type AgendamentoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * The data used to create many Agendamentos.
   */
  data: Prisma.AgendamentoCreateManyInput | Prisma.AgendamentoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Agendamento update
 */
export type AgendamentoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * The data needed to update a Agendamento.
   */
  data: Prisma.XOR<Prisma.AgendamentoUpdateInput, Prisma.AgendamentoUncheckedUpdateInput>
  /**
   * Choose, which Agendamento to update.
   */
  where: Prisma.AgendamentoWhereUniqueInput
}

/**
 * Agendamento updateMany
 */
export type AgendamentoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Agendamentos.
   */
  data: Prisma.XOR<Prisma.AgendamentoUpdateManyMutationInput, Prisma.AgendamentoUncheckedUpdateManyInput>
  /**
   * Filter which Agendamentos to update
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * Limit how many Agendamentos to update.
   */
  limit?: number
}

/**
 * Agendamento updateManyAndReturn
 */
export type AgendamentoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * The data used to update Agendamentos.
   */
  data: Prisma.XOR<Prisma.AgendamentoUpdateManyMutationInput, Prisma.AgendamentoUncheckedUpdateManyInput>
  /**
   * Filter which Agendamentos to update
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * Limit how many Agendamentos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Agendamento upsert
 */
export type AgendamentoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * The filter to search for the Agendamento to update in case it exists.
   */
  where: Prisma.AgendamentoWhereUniqueInput
  /**
   * In case the Agendamento found by the `where` argument doesn't exist, create a new Agendamento with this data.
   */
  create: Prisma.XOR<Prisma.AgendamentoCreateInput, Prisma.AgendamentoUncheckedCreateInput>
  /**
   * In case the Agendamento was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AgendamentoUpdateInput, Prisma.AgendamentoUncheckedUpdateInput>
}

/**
 * Agendamento delete
 */
export type AgendamentoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  /**
   * Filter which Agendamento to delete.
   */
  where: Prisma.AgendamentoWhereUniqueInput
}

/**
 * Agendamento deleteMany
 */
export type AgendamentoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Agendamentos to delete
   */
  where?: Prisma.AgendamentoWhereInput
  /**
   * Limit how many Agendamentos to delete.
   */
  limit?: number
}

/**
 * Agendamento without action
 */
export type AgendamentoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
}
