
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Servico` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Servico
 * 
 */
export type ServicoModel = runtime.Types.Result.DefaultSelection<Prisma.$ServicoPayload>

export type AggregateServico = {
  _count: ServicoCountAggregateOutputType | null
  _avg: ServicoAvgAggregateOutputType | null
  _sum: ServicoSumAggregateOutputType | null
  _min: ServicoMinAggregateOutputType | null
  _max: ServicoMaxAggregateOutputType | null
}

export type ServicoAvgAggregateOutputType = {
  id_servico: number | null
}

export type ServicoSumAggregateOutputType = {
  id_servico: number | null
}

export type ServicoMinAggregateOutputType = {
  id_servico: number | null
  nome_servico: string | null
}

export type ServicoMaxAggregateOutputType = {
  id_servico: number | null
  nome_servico: string | null
}

export type ServicoCountAggregateOutputType = {
  id_servico: number
  nome_servico: number
  _all: number
}


export type ServicoAvgAggregateInputType = {
  id_servico?: true
}

export type ServicoSumAggregateInputType = {
  id_servico?: true
}

export type ServicoMinAggregateInputType = {
  id_servico?: true
  nome_servico?: true
}

export type ServicoMaxAggregateInputType = {
  id_servico?: true
  nome_servico?: true
}

export type ServicoCountAggregateInputType = {
  id_servico?: true
  nome_servico?: true
  _all?: true
}

export type ServicoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Servico to aggregate.
   */
  where?: Prisma.ServicoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servicos to fetch.
   */
  orderBy?: Prisma.ServicoOrderByWithRelationInput | Prisma.ServicoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServicoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servicos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servicos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Servicos
  **/
  _count?: true | ServicoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ServicoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ServicoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServicoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServicoMaxAggregateInputType
}

export type GetServicoAggregateType<T extends ServicoAggregateArgs> = {
      [P in keyof T & keyof AggregateServico]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServico[P]>
    : Prisma.GetScalarType<T[P], AggregateServico[P]>
}




export type ServicoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServicoWhereInput
  orderBy?: Prisma.ServicoOrderByWithAggregationInput | Prisma.ServicoOrderByWithAggregationInput[]
  by: Prisma.ServicoScalarFieldEnum[] | Prisma.ServicoScalarFieldEnum
  having?: Prisma.ServicoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServicoCountAggregateInputType | true
  _avg?: ServicoAvgAggregateInputType
  _sum?: ServicoSumAggregateInputType
  _min?: ServicoMinAggregateInputType
  _max?: ServicoMaxAggregateInputType
}

export type ServicoGroupByOutputType = {
  id_servico: number
  nome_servico: string
  _count: ServicoCountAggregateOutputType | null
  _avg: ServicoAvgAggregateOutputType | null
  _sum: ServicoSumAggregateOutputType | null
  _min: ServicoMinAggregateOutputType | null
  _max: ServicoMaxAggregateOutputType | null
}

type GetServicoGroupByPayload<T extends ServicoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServicoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServicoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServicoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServicoGroupByOutputType[P]>
      }
    >
  >



export type ServicoWhereInput = {
  AND?: Prisma.ServicoWhereInput | Prisma.ServicoWhereInput[]
  OR?: Prisma.ServicoWhereInput[]
  NOT?: Prisma.ServicoWhereInput | Prisma.ServicoWhereInput[]
  id_servico?: Prisma.IntFilter<"Servico"> | number
  nome_servico?: Prisma.StringFilter<"Servico"> | string
  agendamentos?: Prisma.AgendamentoListRelationFilter
}

export type ServicoOrderByWithRelationInput = {
  id_servico?: Prisma.SortOrder
  nome_servico?: Prisma.SortOrder
  agendamentos?: Prisma.AgendamentoOrderByRelationAggregateInput
}

export type ServicoWhereUniqueInput = Prisma.AtLeast<{
  id_servico?: number
  AND?: Prisma.ServicoWhereInput | Prisma.ServicoWhereInput[]
  OR?: Prisma.ServicoWhereInput[]
  NOT?: Prisma.ServicoWhereInput | Prisma.ServicoWhereInput[]
  nome_servico?: Prisma.StringFilter<"Servico"> | string
  agendamentos?: Prisma.AgendamentoListRelationFilter
}, "id_servico">

export type ServicoOrderByWithAggregationInput = {
  id_servico?: Prisma.SortOrder
  nome_servico?: Prisma.SortOrder
  _count?: Prisma.ServicoCountOrderByAggregateInput
  _avg?: Prisma.ServicoAvgOrderByAggregateInput
  _max?: Prisma.ServicoMaxOrderByAggregateInput
  _min?: Prisma.ServicoMinOrderByAggregateInput
  _sum?: Prisma.ServicoSumOrderByAggregateInput
}

export type ServicoScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServicoScalarWhereWithAggregatesInput | Prisma.ServicoScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServicoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServicoScalarWhereWithAggregatesInput | Prisma.ServicoScalarWhereWithAggregatesInput[]
  id_servico?: Prisma.IntWithAggregatesFilter<"Servico"> | number
  nome_servico?: Prisma.StringWithAggregatesFilter<"Servico"> | string
}

export type ServicoCreateInput = {
  nome_servico: string
  agendamentos?: Prisma.AgendamentoCreateNestedManyWithoutServicoInput
}

export type ServicoUncheckedCreateInput = {
  id_servico?: number
  nome_servico: string
  agendamentos?: Prisma.AgendamentoUncheckedCreateNestedManyWithoutServicoInput
}

export type ServicoUpdateInput = {
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
  agendamentos?: Prisma.AgendamentoUpdateManyWithoutServicoNestedInput
}

export type ServicoUncheckedUpdateInput = {
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
  agendamentos?: Prisma.AgendamentoUncheckedUpdateManyWithoutServicoNestedInput
}

export type ServicoCreateManyInput = {
  id_servico?: number
  nome_servico: string
}

export type ServicoUpdateManyMutationInput = {
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServicoUncheckedUpdateManyInput = {
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServicoCountOrderByAggregateInput = {
  id_servico?: Prisma.SortOrder
  nome_servico?: Prisma.SortOrder
}

export type ServicoAvgOrderByAggregateInput = {
  id_servico?: Prisma.SortOrder
}

export type ServicoMaxOrderByAggregateInput = {
  id_servico?: Prisma.SortOrder
  nome_servico?: Prisma.SortOrder
}

export type ServicoMinOrderByAggregateInput = {
  id_servico?: Prisma.SortOrder
  nome_servico?: Prisma.SortOrder
}

export type ServicoSumOrderByAggregateInput = {
  id_servico?: Prisma.SortOrder
}

export type ServicoScalarRelationFilter = {
  is?: Prisma.ServicoWhereInput
  isNot?: Prisma.ServicoWhereInput
}

export type ServicoCreateNestedOneWithoutAgendamentosInput = {
  create?: Prisma.XOR<Prisma.ServicoCreateWithoutAgendamentosInput, Prisma.ServicoUncheckedCreateWithoutAgendamentosInput>
  connectOrCreate?: Prisma.ServicoCreateOrConnectWithoutAgendamentosInput
  connect?: Prisma.ServicoWhereUniqueInput
}

export type ServicoUpdateOneRequiredWithoutAgendamentosNestedInput = {
  create?: Prisma.XOR<Prisma.ServicoCreateWithoutAgendamentosInput, Prisma.ServicoUncheckedCreateWithoutAgendamentosInput>
  connectOrCreate?: Prisma.ServicoCreateOrConnectWithoutAgendamentosInput
  upsert?: Prisma.ServicoUpsertWithoutAgendamentosInput
  connect?: Prisma.ServicoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ServicoUpdateToOneWithWhereWithoutAgendamentosInput, Prisma.ServicoUpdateWithoutAgendamentosInput>, Prisma.ServicoUncheckedUpdateWithoutAgendamentosInput>
}

export type ServicoCreateWithoutAgendamentosInput = {
  nome_servico: string
}

export type ServicoUncheckedCreateWithoutAgendamentosInput = {
  id_servico?: number
  nome_servico: string
}

export type ServicoCreateOrConnectWithoutAgendamentosInput = {
  where: Prisma.ServicoWhereUniqueInput
  create: Prisma.XOR<Prisma.ServicoCreateWithoutAgendamentosInput, Prisma.ServicoUncheckedCreateWithoutAgendamentosInput>
}

export type ServicoUpsertWithoutAgendamentosInput = {
  update: Prisma.XOR<Prisma.ServicoUpdateWithoutAgendamentosInput, Prisma.ServicoUncheckedUpdateWithoutAgendamentosInput>
  create: Prisma.XOR<Prisma.ServicoCreateWithoutAgendamentosInput, Prisma.ServicoUncheckedCreateWithoutAgendamentosInput>
  where?: Prisma.ServicoWhereInput
}

export type ServicoUpdateToOneWithWhereWithoutAgendamentosInput = {
  where?: Prisma.ServicoWhereInput
  data: Prisma.XOR<Prisma.ServicoUpdateWithoutAgendamentosInput, Prisma.ServicoUncheckedUpdateWithoutAgendamentosInput>
}

export type ServicoUpdateWithoutAgendamentosInput = {
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServicoUncheckedUpdateWithoutAgendamentosInput = {
  id_servico?: Prisma.IntFieldUpdateOperationsInput | number
  nome_servico?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ServicoCountOutputType
 */

export type ServicoCountOutputType = {
  agendamentos: number
}

export type ServicoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  agendamentos?: boolean | ServicoCountOutputTypeCountAgendamentosArgs
}

/**
 * ServicoCountOutputType without action
 */
export type ServicoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicoCountOutputType
   */
  select?: Prisma.ServicoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ServicoCountOutputType without action
 */
export type ServicoCountOutputTypeCountAgendamentosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AgendamentoWhereInput
}


export type ServicoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_servico?: boolean
  nome_servico?: boolean
  agendamentos?: boolean | Prisma.Servico$agendamentosArgs<ExtArgs>
  _count?: boolean | Prisma.ServicoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["servico"]>

export type ServicoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_servico?: boolean
  nome_servico?: boolean
}, ExtArgs["result"]["servico"]>

export type ServicoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id_servico?: boolean
  nome_servico?: boolean
}, ExtArgs["result"]["servico"]>

export type ServicoSelectScalar = {
  id_servico?: boolean
  nome_servico?: boolean
}

export type ServicoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id_servico" | "nome_servico", ExtArgs["result"]["servico"]>
export type ServicoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  agendamentos?: boolean | Prisma.Servico$agendamentosArgs<ExtArgs>
  _count?: boolean | Prisma.ServicoCountOutputTypeDefaultArgs<ExtArgs>
}
export type ServicoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ServicoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ServicoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Servico"
  objects: {
    agendamentos: Prisma.$AgendamentoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id_servico: number
    nome_servico: string
  }, ExtArgs["result"]["servico"]>
  composites: {}
}

export type ServicoGetPayload<S extends boolean | null | undefined | ServicoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServicoPayload, S>

export type ServicoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServicoCountAggregateInputType | true
  }

export interface ServicoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servico'], meta: { name: 'Servico' } }
  /**
   * Find zero or one Servico that matches the filter.
   * @param {ServicoFindUniqueArgs} args - Arguments to find a Servico
   * @example
   * // Get one Servico
   * const servico = await prisma.servico.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServicoFindUniqueArgs>(args: Prisma.SelectSubset<T, ServicoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Servico that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServicoFindUniqueOrThrowArgs} args - Arguments to find a Servico
   * @example
   * // Get one Servico
   * const servico = await prisma.servico.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServicoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Servico that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoFindFirstArgs} args - Arguments to find a Servico
   * @example
   * // Get one Servico
   * const servico = await prisma.servico.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServicoFindFirstArgs>(args?: Prisma.SelectSubset<T, ServicoFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Servico that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoFindFirstOrThrowArgs} args - Arguments to find a Servico
   * @example
   * // Get one Servico
   * const servico = await prisma.servico.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServicoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Servicos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Servicos
   * const servicos = await prisma.servico.findMany()
   * 
   * // Get first 10 Servicos
   * const servicos = await prisma.servico.findMany({ take: 10 })
   * 
   * // Only select the `id_servico`
   * const servicoWithId_servicoOnly = await prisma.servico.findMany({ select: { id_servico: true } })
   * 
   */
  findMany<T extends ServicoFindManyArgs>(args?: Prisma.SelectSubset<T, ServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Servico.
   * @param {ServicoCreateArgs} args - Arguments to create a Servico.
   * @example
   * // Create one Servico
   * const Servico = await prisma.servico.create({
   *   data: {
   *     // ... data to create a Servico
   *   }
   * })
   * 
   */
  create<T extends ServicoCreateArgs>(args: Prisma.SelectSubset<T, ServicoCreateArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Servicos.
   * @param {ServicoCreateManyArgs} args - Arguments to create many Servicos.
   * @example
   * // Create many Servicos
   * const servico = await prisma.servico.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServicoCreateManyArgs>(args?: Prisma.SelectSubset<T, ServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Servicos and returns the data saved in the database.
   * @param {ServicoCreateManyAndReturnArgs} args - Arguments to create many Servicos.
   * @example
   * // Create many Servicos
   * const servico = await prisma.servico.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Servicos and only return the `id_servico`
   * const servicoWithId_servicoOnly = await prisma.servico.createManyAndReturn({
   *   select: { id_servico: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServicoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Servico.
   * @param {ServicoDeleteArgs} args - Arguments to delete one Servico.
   * @example
   * // Delete one Servico
   * const Servico = await prisma.servico.delete({
   *   where: {
   *     // ... filter to delete one Servico
   *   }
   * })
   * 
   */
  delete<T extends ServicoDeleteArgs>(args: Prisma.SelectSubset<T, ServicoDeleteArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Servico.
   * @param {ServicoUpdateArgs} args - Arguments to update one Servico.
   * @example
   * // Update one Servico
   * const servico = await prisma.servico.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServicoUpdateArgs>(args: Prisma.SelectSubset<T, ServicoUpdateArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Servicos.
   * @param {ServicoDeleteManyArgs} args - Arguments to filter Servicos to delete.
   * @example
   * // Delete a few Servicos
   * const { count } = await prisma.servico.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServicoDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Servicos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Servicos
   * const servico = await prisma.servico.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServicoUpdateManyArgs>(args: Prisma.SelectSubset<T, ServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Servicos and returns the data updated in the database.
   * @param {ServicoUpdateManyAndReturnArgs} args - Arguments to update many Servicos.
   * @example
   * // Update many Servicos
   * const servico = await prisma.servico.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Servicos and only return the `id_servico`
   * const servicoWithId_servicoOnly = await prisma.servico.updateManyAndReturn({
   *   select: { id_servico: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServicoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Servico.
   * @param {ServicoUpsertArgs} args - Arguments to update or create a Servico.
   * @example
   * // Update or create a Servico
   * const servico = await prisma.servico.upsert({
   *   create: {
   *     // ... data to create a Servico
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Servico we want to update
   *   }
   * })
   */
  upsert<T extends ServicoUpsertArgs>(args: Prisma.SelectSubset<T, ServicoUpsertArgs<ExtArgs>>): Prisma.Prisma__ServicoClient<runtime.Types.Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Servicos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoCountArgs} args - Arguments to filter Servicos to count.
   * @example
   * // Count the number of Servicos
   * const count = await prisma.servico.count({
   *   where: {
   *     // ... the filter for the Servicos we want to count
   *   }
   * })
  **/
  count<T extends ServicoCountArgs>(
    args?: Prisma.Subset<T, ServicoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServicoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Servico.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServicoAggregateArgs>(args: Prisma.Subset<T, ServicoAggregateArgs>): Prisma.PrismaPromise<GetServicoAggregateType<T>>

  /**
   * Group by Servico.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServicoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServicoGroupByArgs['orderBy'] }
      : { orderBy?: ServicoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Servico model
 */
readonly fields: ServicoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Servico.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServicoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  agendamentos<T extends Prisma.Servico$agendamentosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Servico$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Servico model
 */
export interface ServicoFieldRefs {
  readonly id_servico: Prisma.FieldRef<"Servico", 'Int'>
  readonly nome_servico: Prisma.FieldRef<"Servico", 'String'>
}
    

// Custom InputTypes
/**
 * Servico findUnique
 */
export type ServicoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter, which Servico to fetch.
   */
  where: Prisma.ServicoWhereUniqueInput
}

/**
 * Servico findUniqueOrThrow
 */
export type ServicoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter, which Servico to fetch.
   */
  where: Prisma.ServicoWhereUniqueInput
}

/**
 * Servico findFirst
 */
export type ServicoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter, which Servico to fetch.
   */
  where?: Prisma.ServicoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servicos to fetch.
   */
  orderBy?: Prisma.ServicoOrderByWithRelationInput | Prisma.ServicoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Servicos.
   */
  cursor?: Prisma.ServicoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servicos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servicos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Servicos.
   */
  distinct?: Prisma.ServicoScalarFieldEnum | Prisma.ServicoScalarFieldEnum[]
}

/**
 * Servico findFirstOrThrow
 */
export type ServicoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter, which Servico to fetch.
   */
  where?: Prisma.ServicoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servicos to fetch.
   */
  orderBy?: Prisma.ServicoOrderByWithRelationInput | Prisma.ServicoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Servicos.
   */
  cursor?: Prisma.ServicoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servicos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servicos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Servicos.
   */
  distinct?: Prisma.ServicoScalarFieldEnum | Prisma.ServicoScalarFieldEnum[]
}

/**
 * Servico findMany
 */
export type ServicoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter, which Servicos to fetch.
   */
  where?: Prisma.ServicoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servicos to fetch.
   */
  orderBy?: Prisma.ServicoOrderByWithRelationInput | Prisma.ServicoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Servicos.
   */
  cursor?: Prisma.ServicoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servicos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servicos.
   */
  skip?: number
  distinct?: Prisma.ServicoScalarFieldEnum | Prisma.ServicoScalarFieldEnum[]
}

/**
 * Servico create
 */
export type ServicoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * The data needed to create a Servico.
   */
  data: Prisma.XOR<Prisma.ServicoCreateInput, Prisma.ServicoUncheckedCreateInput>
}

/**
 * Servico createMany
 */
export type ServicoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Servicos.
   */
  data: Prisma.ServicoCreateManyInput | Prisma.ServicoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Servico createManyAndReturn
 */
export type ServicoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * The data used to create many Servicos.
   */
  data: Prisma.ServicoCreateManyInput | Prisma.ServicoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Servico update
 */
export type ServicoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * The data needed to update a Servico.
   */
  data: Prisma.XOR<Prisma.ServicoUpdateInput, Prisma.ServicoUncheckedUpdateInput>
  /**
   * Choose, which Servico to update.
   */
  where: Prisma.ServicoWhereUniqueInput
}

/**
 * Servico updateMany
 */
export type ServicoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Servicos.
   */
  data: Prisma.XOR<Prisma.ServicoUpdateManyMutationInput, Prisma.ServicoUncheckedUpdateManyInput>
  /**
   * Filter which Servicos to update
   */
  where?: Prisma.ServicoWhereInput
  /**
   * Limit how many Servicos to update.
   */
  limit?: number
}

/**
 * Servico updateManyAndReturn
 */
export type ServicoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * The data used to update Servicos.
   */
  data: Prisma.XOR<Prisma.ServicoUpdateManyMutationInput, Prisma.ServicoUncheckedUpdateManyInput>
  /**
   * Filter which Servicos to update
   */
  where?: Prisma.ServicoWhereInput
  /**
   * Limit how many Servicos to update.
   */
  limit?: number
}

/**
 * Servico upsert
 */
export type ServicoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * The filter to search for the Servico to update in case it exists.
   */
  where: Prisma.ServicoWhereUniqueInput
  /**
   * In case the Servico found by the `where` argument doesn't exist, create a new Servico with this data.
   */
  create: Prisma.XOR<Prisma.ServicoCreateInput, Prisma.ServicoUncheckedCreateInput>
  /**
   * In case the Servico was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServicoUpdateInput, Prisma.ServicoUncheckedUpdateInput>
}

/**
 * Servico delete
 */
export type ServicoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
  /**
   * Filter which Servico to delete.
   */
  where: Prisma.ServicoWhereUniqueInput
}

/**
 * Servico deleteMany
 */
export type ServicoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Servicos to delete
   */
  where?: Prisma.ServicoWhereInput
  /**
   * Limit how many Servicos to delete.
   */
  limit?: number
}

/**
 * Servico.agendamentos
 */
export type Servico$agendamentosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agendamento
   */
  select?: Prisma.AgendamentoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agendamento
   */
  omit?: Prisma.AgendamentoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendamentoInclude<ExtArgs> | null
  where?: Prisma.AgendamentoWhereInput
  orderBy?: Prisma.AgendamentoOrderByWithRelationInput | Prisma.AgendamentoOrderByWithRelationInput[]
  cursor?: Prisma.AgendamentoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AgendamentoScalarFieldEnum | Prisma.AgendamentoScalarFieldEnum[]
}

/**
 * Servico without action
 */
export type ServicoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Servico
   */
  select?: Prisma.ServicoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Servico
   */
  omit?: Prisma.ServicoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicoInclude<ExtArgs> | null
}
