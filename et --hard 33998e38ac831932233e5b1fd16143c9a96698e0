[33mcommit 33998e38ac831932233e5b1fd16143c9a96698e0[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: Carlos Henrique <carlospaixao05@gmail.com>
Date:   Fri Oct 24 21:02:19 2025 -0300

    feat: adicionando nova estrutura de backend com funcionalidades atualizadas

[1mdiff --git a/Back-End/generated/prisma/browser.ts b/Back-End/generated/prisma/browser.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..514dd43[m
[1m--- /dev/null[m
[1m+++ b/Back-End/generated/prisma/browser.ts[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m
[32m+[m[32m/* !!! This is code generated by Prisma. Do not edit directly. !!! */[m
[32m+[m[32m/* eslint-disable */[m
[32m+[m[32m// @ts-nocheck[m[41m [m
[32m+[m[32m/*[m
[32m+[m[32m * This file should be your main import to use Prisma-related types and utilities in a browser.[m[41m [m
[32m+[m[32m * Use it to get access to models, enums, and input types.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This file does not contain a `PrismaClient` class, nor several other helpers that are intended as server-side only.[m
[32m+[m[32m * See `client.ts` for the standard, server-side entry point.[m
[32m+[m[32m *[m
[32m+[m[32m * ðŸŸ¢ You can import this file directly.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mimport * as Prisma from './internal/prismaNamespaceBrowser.ts'[m
[32m+[m[32mexport { Prisma }[m
[32m+[m[32mexport * as $Enums from './enums.ts'[m
[32m+[m[32mexport * from './enums.ts';[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Cliente[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Cliente = Prisma.ClienteModel[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Servico[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Servico = Prisma.ServicoModel[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Agendamento[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Agendamento = Prisma.AgendamentoModel[m
[1mdiff --git a/Back-End/generated/prisma/client.ts b/Back-End/generated/prisma/client.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..16ca447[m
[1m--- /dev/null[m
[1m+++ b/Back-End/generated/prisma/client.ts[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m
[32m+[m[32m/* !!! This is code generated by Prisma. Do not edit directly. !!! */[m
[32m+[m[32m/* eslint-disable */[m
[32m+[m[32m// @ts-nocheck[m[41m [m
[32m+[m[32m/*[m
[32m+[m[32m * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.[m
[32m+[m[32m * If you're looking for something you can import in the client-side of your application, please refer to the `browser.ts` file instead.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * ðŸŸ¢ You can import this file directly.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mimport * as process from 'node:process'[m
[32m+[m[32mimport * as path from 'node:path'[m
[32m+[m[32mimport { fileURLToPath } from 'node:url'[m
[32m+[m[32mglobalThis['__dirname'] = path.dirname(fileURLToPath(import.meta.url))[m
[32m+[m
[32m+[m[32mimport * as runtime from "@prisma/client/runtime/library"[m
[32m+[m[32mimport * as $Enums from "./enums.ts"[m
[32m+[m[32mimport * as $Class from "./internal/class.ts"[m
[32m+[m[32mimport * as Prisma from "./internal/prismaNamespace.ts"[m
[32m+[m
[32m+[m[32mexport * as $Enums from './enums.ts'[m
[32m+[m[32mexport * from "./enums.ts"[m
[32m+[m[32m/**[m
[32m+[m[32m * ## Prisma Client[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Type-safe database client for TypeScript[m
[32m+[m[32m * @example[m
[32m+[m[32m * ```[m
[32m+[m[32m * const prisma = new PrismaClient()[m
[32m+[m[32m * // Fetch zero or more Clientes[m
[32m+[m[32m * const clientes = await prisma.cliente.findMany()[m
[32m+[m[32m * ```[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).[m
[32m+[m[32m */[m
[32m+[m[32mexport const PrismaClient = $Class.getPrismaClientClass(__dirname)[m
[32m+[m[32mexport type PrismaClient<LogOpts extends Prisma.LogLevel = never, OmitOpts extends Prisma.PrismaClientOptions["omit"] = Prisma.PrismaClientOptions["omit"], ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = $Class.PrismaClient<LogOpts, OmitOpts, ExtArgs>[m
[32m+[m[32mexport { Prisma }[m
[32m+[m
[32m+[m
[32m+[m[32m// file annotations for bundling tools to include these files[m
[32m+[m[32mpath.join(__dirname, "libquery_engine-debian-openssl-3.0.x.so.node")[m
[32m+[m[32mpath.join(process.cwd(), "generated/prisma/libquery_engine-debian-openssl-3.0.x.so.node")[m
[32m+[m
[32m+[m[32m// file annotations for bundling tools to include these files[m
[32m+[m[32mpath.join(__dirname, "query_engine-windows.dll.node")[m
[32m+[m[32mpath.join(process.cwd(), "generated/prisma/query_engine-windows.dll.node")[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Cliente[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Cliente = Prisma.ClienteModel[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Servico[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Servico = Prisma.ServicoModel[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Agendamento[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m */[m
[32m+[m[32mexport type Agendamento = Prisma.AgendamentoModel[m
[1mdiff --git a/Back-End/generated/prisma/commonInputTypes.ts b/Back-End/generated/prisma/commonInputTypes.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..ec84f14[m
[1m--- /dev/null[m
[1m+++ b/Back-End/generated/prisma/commonInputTypes.ts[m
[36m@@ -0,0 +1,275 @@[m
[32m+[m
[32m+[m[32m/* !!! This is code generated by Prisma. Do not edit directly. !!! */[m
[32m+[m[32m/* eslint-disable */[m
[32m+[m[32m// @ts-nocheck[m[41m [m
[32m+[m[32m/*[m
[32m+[m[32m * This file exports various common sort, input & filter types that are not directly linked to a particular model.[m
[32m+[m[32m *[m
[32m+[m[32m * ðŸŸ¢ You can import this file directly.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mimport type * as runtime from "@prisma/client/runtime/library"[m
[32m+[m[32mimport * as $Enums from "./enums.ts"[m
[32m+[m[32mimport type * as Prisma from "./internal/prismaNamespace.ts"[m
[32m+[m
[32m+[m
[32m+[m[32mexport type IntFilter<$PrismaModel = never> = {[m
[32m+[m[32m  equals?: number | Prisma.IntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  in?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  notIn?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  lt?: number | Prisma.IntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  lte?: number | Prisma.IntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  gt?: number | Prisma.IntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  gte?: number | Prisma.IntFieldRefInput<$PrismaModel>[m
[32m+[m[32m  not?: Prisma.NestedIntFilter<$PrismaModel> | number[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport type StringFilter<$PrismaModel = never> = {[m
[32m+[m[32m  equals?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  in?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  notIn?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  lt?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  lte?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  gt?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  gte?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  contains?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  startsWith?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  endsWith?: string | Prisma.StringFieldRefInput<$PrismaModel>[m
[32m+[m[32m  mode?: Prisma.QueryMode[m
[32m+[m[32m  not?: Prisma.NestedStringFilte